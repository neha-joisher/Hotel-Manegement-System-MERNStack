{"ast":null,"code":"import axios from \"axios\";\nimport { CONFERENCE_INSERT_REQUEST, CONFERENCE_INSERT_SUCCESS, CONFERENCE_INSERT_FAIL, CONFERENCE_ALL_REQUEST, CONFERENCE_ALL_SUCCESS, CONFERENCE_ALL_FAIL, CONFERENCE_BYID_REQUEST, CONFERENCE_BYID_SUCCESS, CONFERENCE_BYID_FAIL, CONFERENCE_DELETE_REQUEST, CONFERENCE_DELETE_SUCCESS, CONFERENCE_DELETE_FAIL, CONFERENCE_UPDATE_REQUEST, CONFERENCE_UPDATE_SUCCESS, CONFERENCE_UPDATE_FAIL, CONFERENCE_UPDATE_RESET } from '../constants/conferenceConstant.js';\nexport const conferenceAdd = (conName, conDes, conSeats, conPrice, conFeatures, conImg1, conImg2, conImg3) => async dispatch => {\n  try {\n    dispatch({\n      type: CONFERENCE_INSERT_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('http://localhost:6500/api/conference/addConference', {\n      conName,\n      conDes,\n      conSeats,\n      conPrice,\n      conFeatures,\n      conImg1,\n      conImg2,\n      conImg3\n    }, config);\n    dispatch({\n      type: CONFERENCE_INSERT_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem('conferenceInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: CONFERENCE_INSERT_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const allConference = () => async dispatch => {\n  try {\n    dispatch({\n      type: CONFERENCE_ALL_REQUEST\n    });\n    const {\n      data\n    } = await axios.get('/api/conference/');\n    console.log(data);\n    dispatch({\n      type: CONFERENCE_ALL_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n    dispatch({\n      type: CONFERENCE_ALL_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const conferenceById = id => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: CONFERENCE_BYID_REQUEST\n    });\n    const {\n      data\n    } = await axios.get(`http://localhost:6500/api/conference/${id}`);\n    dispatch({\n      type: CONFERENCE_BYID_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: CONFERENCE_BYID_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const deleteConference = id => async dispatch => {\n  try {\n    dispatch({\n      type: CONFERENCE_DELETE_REQUEST\n    });\n    await axios.delete(`/api/conference/${id}`);\n    dispatch({\n      type: CONFERENCE_DELETE_SUCCESS\n    });\n  } catch (error) {\n    dispatch({\n      type: CONFERENCE_DELETE_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const updateConDetails = conference => async dispatch => {\n  try {\n    dispatch({\n      type: CONFERENCE_UPDATE_REQUEST\n    });\n    const {\n      data\n    } = axios.put(`/api/conference/${conference._id}`, conference);\n    dispatch({\n      type: CONFERENCE_UPDATE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: CONFERENCE_UPDATE_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const filterconference = searchkey => async dispatch => {\n  var filteredConference;\n\n  try {\n    dispatch({\n      type: CONFERENCE_ALL_REQUEST\n    });\n    const response = await axios.get('/api/conference/');\n    filteredConference = response.data.filter(conference => conference.conName.toLowerCase().includes(searchkey));\n    dispatch({\n      type: CONFERENCE_ALL_SUCCESS,\n      payload: filteredConference\n    });\n  } catch (error) {\n    console.log(error);\n    dispatch({\n      type: CONFERENCE_ALL_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};","map":{"version":3,"names":["axios","CONFERENCE_INSERT_REQUEST","CONFERENCE_INSERT_SUCCESS","CONFERENCE_INSERT_FAIL","CONFERENCE_ALL_REQUEST","CONFERENCE_ALL_SUCCESS","CONFERENCE_ALL_FAIL","CONFERENCE_BYID_REQUEST","CONFERENCE_BYID_SUCCESS","CONFERENCE_BYID_FAIL","CONFERENCE_DELETE_REQUEST","CONFERENCE_DELETE_SUCCESS","CONFERENCE_DELETE_FAIL","CONFERENCE_UPDATE_REQUEST","CONFERENCE_UPDATE_SUCCESS","CONFERENCE_UPDATE_FAIL","CONFERENCE_UPDATE_RESET","conferenceAdd","conName","conDes","conSeats","conPrice","conFeatures","conImg1","conImg2","conImg3","dispatch","type","config","headers","data","post","payload","localStorage","setItem","JSON","stringify","error","response","message","allConference","get","console","log","conferenceById","id","getState","deleteConference","delete","updateConDetails","conference","put","_id","filterconference","searchkey","filteredConference","filter","toLowerCase","includes"],"sources":["/Users/nehajoisher/Desktop/Test/frontend/src/actions/conferenceAction.js"],"sourcesContent":["import axios from \"axios\"\nimport { CONFERENCE_INSERT_REQUEST, CONFERENCE_INSERT_SUCCESS, CONFERENCE_INSERT_FAIL, CONFERENCE_ALL_REQUEST, CONFERENCE_ALL_SUCCESS, CONFERENCE_ALL_FAIL, CONFERENCE_BYID_REQUEST, CONFERENCE_BYID_SUCCESS, CONFERENCE_BYID_FAIL, CONFERENCE_DELETE_REQUEST, CONFERENCE_DELETE_SUCCESS, CONFERENCE_DELETE_FAIL, CONFERENCE_UPDATE_REQUEST, CONFERENCE_UPDATE_SUCCESS, CONFERENCE_UPDATE_FAIL, CONFERENCE_UPDATE_RESET } from '../constants/conferenceConstant.js'\n\nexport const conferenceAdd = (conName, conDes, conSeats, conPrice, conFeatures, conImg1, conImg2, conImg3) => async (dispatch) => {\n    try {\n        dispatch({\n            type: CONFERENCE_INSERT_REQUEST\n        })\n\n        const config = {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }\n\n        const { data } = await axios.post('http://localhost:6500/api/conference/addConference', { conName, conDes, conSeats, conPrice, conFeatures, conImg1, conImg2, conImg3 },\n            config\n        )\n\n        dispatch({\n            type: CONFERENCE_INSERT_SUCCESS,\n            payload: data,\n        })\n\n\n        localStorage.setItem('conferenceInfo', JSON.stringify(data))\n    } catch (error) {\n        dispatch({\n            type: CONFERENCE_INSERT_FAIL,\n            payload:\n                error.response && error.response.data.message\n                    ? error.response.data.message\n                    : error.message\n        })\n    }\n}\n\n\nexport const allConference = () => async (dispatch) => {\n    try {\n          dispatch({\n                type: CONFERENCE_ALL_REQUEST,\n          })\n\n          const { data } = await axios.get('/api/conference/')\n\n          console.log(data)\n\n          dispatch({\n                type: CONFERENCE_ALL_SUCCESS,\n                payload: data\n          })\n    } catch (error) {\n          console.log(error)\n\n          dispatch({\n                type: CONFERENCE_ALL_FAIL,\n                payload:\n                      error.response && error.response.data.message\n                            ? error.response.data.message\n                            : error.message,\n\n          })\n    }\n}\n\nexport const conferenceById = (id) => async (dispatch, getState) => {\n    try {\n          dispatch({\n                type: CONFERENCE_BYID_REQUEST,\n          })\n\n          const { data } = await axios.get(`http://localhost:6500/api/conference/${id}`)\n\n          dispatch({\n                type: CONFERENCE_BYID_SUCCESS,\n                payload: data\n          })\n\n    } catch (error) {\n          dispatch({\n                type: CONFERENCE_BYID_FAIL,\n                payload:\n                      error.response && error.response.data.message\n                            ? error.response.data.message\n                            : error.message,\n          })\n    }\n}\n\nexport const deleteConference = (id) => async (dispatch) => {\n    try {\n          dispatch({\n                type: CONFERENCE_DELETE_REQUEST,\n          })\n\n          await axios.delete(`/api/conference/${id}`)\n\n          dispatch({\n                type: CONFERENCE_DELETE_SUCCESS,\n\n          })\n    } catch (error) {\n          dispatch({\n                type: CONFERENCE_DELETE_FAIL,\n                payload:\n                      error.response && error.response.data.message\n                            ? error.response.data.message\n                            : error.message,\n          })\n    }\n}\n\n\nexport const updateConDetails = (conference) => async (dispatch) => {\n\n      try {\n            dispatch({\n                  type: CONFERENCE_UPDATE_REQUEST,\n            })\n\n            const { data } = axios.put(`/api/conference/${conference._id}`, conference)\n\n            dispatch({\n                  type: CONFERENCE_UPDATE_SUCCESS,\n                  payload: data,\n            })\n\n      } catch (error) {\n            dispatch({\n                  type: CONFERENCE_UPDATE_FAIL,\n                  payload:\n                        error.response && error.response.data.message\n                              ? error.response.data.message\n                              : error.message\n            })\n      }\n\n}\n\nexport const filterconference = (searchkey) => async dispatch => {\n      var filteredConference;\n      try {\n            dispatch({\n            type: CONFERENCE_ALL_REQUEST,\n            })\n\n            const  response = await axios.get('/api/conference/')\n            filteredConference = response.data.filter(conference => conference.conName.toLowerCase().includes(searchkey))\n            dispatch({\n                type: CONFERENCE_ALL_SUCCESS,\n                payload: filteredConference\n            })\n\n      } catch (error) {\n            console.log(error)\n                 dispatch({\n                  type: CONFERENCE_ALL_FAIL,\n                  payload:\n                        error.response && error.response.data.message\n                              ? error.response.data.message\n                              : error.message,\n\n            })\n\n      }\n\n  }"],"mappings":"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"},"metadata":{},"sourceType":"module"}