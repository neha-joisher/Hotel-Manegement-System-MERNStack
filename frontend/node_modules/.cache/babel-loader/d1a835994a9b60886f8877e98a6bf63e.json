{"ast":null,"code":"import axios from 'axios';\nimport { ROOMS_ALL_REQUEST, ROOMS_ALL_SUCCESS, ROOMS_ALL_FAIL, ROOMS_BYID_REQUEST, ROOMS_BYID_SUCCESS, ROOMS_BYIDL_FAIL, ROOMS_POSTBYID_REQUEST, ROOMS_POSTBYID_SUCCESS, ROOMS_POSTBYIDL_FAIL, CREATE_ROOMS_REQUEST, CREATE_ROOMS_SUCCESS, CREATE_ROOMS_FAIL, ROOMS_LIST_REQUEST, ROOMS_LIST_SUCCESS, ROOMS_LIST_FAIL, ROOMS_DELETE_REQUEST, ROOMS_DELETE_SUCCESS, ROOMS_DELETE_FAIL, ROOMS_UPDATE_RESET, ROOMS_UPDATE_SUCCESS, ROOMS_UPDATE_FAIL } from '../constants/roomsConstants.js';\nexport const allRooms = () => async dispatch => {\n  try {\n    dispatch({\n      type: ROOMS_ALL_REQUEST\n    });\n    const {\n      data\n    } = await axios.get('/api/rooms/allrooms');\n    console.log(data);\n    dispatch({\n      type: ROOMS_ALL_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n    dispatch({\n      type: ROOMS_ALL_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const getRoomDetails = id => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: ROOMS_BYID_REQUEST\n    });\n    const {\n      data\n    } = await axios.get(`/api/rooms/${id}`);\n    dispatch({\n      type: ROOMS_BYID_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: ROOMS_BYIDL_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const bookRoomDetails = roomid => async dispatch => {\n  try {\n    dispatch({\n      type: ROOMS_POSTBYID_REQUEST\n    });\n    const {\n      data\n    } = await axios.post('/api/rooms/roomsbyId', {\n      roomid\n    });\n    dispatch({\n      type: ROOMS_POSTBYID_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: ROOMS_POSTBYIDL_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const roomCreate = (name, maxcount, features1, features2, features3, features4, features5, rentperday, imageUrl1, imageUrl2, imageUrl3, type, description) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: CREATE_ROOMS_REQUEST\n    });\n    const {\n      data\n    } = await axios.post(`/api/rooms/createrooms`, {\n      name,\n      maxcount,\n      features1,\n      features2,\n      features3,\n      features4,\n      features5,\n      rentperday,\n      imageUrl1,\n      imageUrl2,\n      imageUrl3,\n      type,\n      description\n    });\n    dispatch({\n      type: CREATE_ROOMS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: CREATE_ROOMS_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const listRooms = () => async dispatch => {\n  try {\n    dispatch({\n      type: ROOMS_LIST_REQUEST\n    });\n    const {\n      data\n    } = await axios.get(`/api/rooms/allrooms`);\n    dispatch({\n      type: ROOMS_LIST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: ROOMS_LIST_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const deleteRoom = id => async dispatch => {\n  try {\n    dispatch({\n      type: ROOMS_DELETE_REQUEST\n    });\n    await axios.delete(`/api/rooms/${id}`);\n    dispatch({\n      type: ROOMS_DELETE_SUCCESS\n    });\n  } catch (error) {\n    dispatch({\n      type: ROOMS_DELETE_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const updateRoom = rooms => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: ROOMS_UPDATE_RESET\n    });\n    const {\n      data\n    } = await axios.put(`/api/rooms/${rooms._id}`, rooms);\n    dispatch({\n      type: ROOMS_UPDATE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: ROOMS_UPDATE_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};","map":{"version":3,"names":["axios","ROOMS_ALL_REQUEST","ROOMS_ALL_SUCCESS","ROOMS_ALL_FAIL","ROOMS_BYID_REQUEST","ROOMS_BYID_SUCCESS","ROOMS_BYIDL_FAIL","ROOMS_POSTBYID_REQUEST","ROOMS_POSTBYID_SUCCESS","ROOMS_POSTBYIDL_FAIL","CREATE_ROOMS_REQUEST","CREATE_ROOMS_SUCCESS","CREATE_ROOMS_FAIL","ROOMS_LIST_REQUEST","ROOMS_LIST_SUCCESS","ROOMS_LIST_FAIL","ROOMS_DELETE_REQUEST","ROOMS_DELETE_SUCCESS","ROOMS_DELETE_FAIL","ROOMS_UPDATE_RESET","ROOMS_UPDATE_SUCCESS","ROOMS_UPDATE_FAIL","allRooms","dispatch","type","data","get","console","log","payload","error","response","message","getRoomDetails","id","getState","bookRoomDetails","roomid","post","roomCreate","name","maxcount","features1","features2","features3","features4","features5","rentperday","imageUrl1","imageUrl2","imageUrl3","description","listRooms","deleteRoom","delete","updateRoom","rooms","put","_id"],"sources":["/Users/nehajoisher/Desktop/Test/frontend/src/actions/roomAction.js"],"sourcesContent":["import axios from 'axios'\n\nimport {\n      ROOMS_ALL_REQUEST,\n      ROOMS_ALL_SUCCESS,\n      ROOMS_ALL_FAIL,\n      ROOMS_BYID_REQUEST,\n      ROOMS_BYID_SUCCESS,\n      ROOMS_BYIDL_FAIL,\n      ROOMS_POSTBYID_REQUEST,\n      ROOMS_POSTBYID_SUCCESS,\n      ROOMS_POSTBYIDL_FAIL,\n      CREATE_ROOMS_REQUEST,\n      CREATE_ROOMS_SUCCESS,\n      CREATE_ROOMS_FAIL,\n      ROOMS_LIST_REQUEST,\n      ROOMS_LIST_SUCCESS,\n      ROOMS_LIST_FAIL,\n      ROOMS_DELETE_REQUEST,\n      ROOMS_DELETE_SUCCESS,\n      ROOMS_DELETE_FAIL,\n      ROOMS_UPDATE_RESET,\n      ROOMS_UPDATE_SUCCESS,\n      ROOMS_UPDATE_FAIL\n} from '../constants/roomsConstants.js'\n\nexport const allRooms = () => async (dispatch) => {\n      try {\n            dispatch({\n                  type: ROOMS_ALL_REQUEST,\n            })\n\n            const { data } = await axios.get('/api/rooms/allrooms')\n\n            console.log(data)\n\n            dispatch({\n                  type: ROOMS_ALL_SUCCESS,\n                  payload: data\n            })\n      } catch (error) {\n            console.log(error)\n\n            dispatch({\n                  type: ROOMS_ALL_FAIL,\n                  payload:\n                        error.response && error.response.data.message\n                              ? error.response.data.message\n                              : error.message,\n\n            })\n      }\n}\n\nexport const getRoomDetails = (id) => async (dispatch, getState) => {\n      try {\n            dispatch({\n                  type: ROOMS_BYID_REQUEST,\n            })\n\n            const { data } = await axios.get(`/api/rooms/${id}`)\n\n            dispatch({\n                  type: ROOMS_BYID_SUCCESS,\n                  payload: data\n            })\n\n      } catch (error) {\n            dispatch({\n                  type: ROOMS_BYIDL_FAIL,\n                  payload:\n                        error.response && error.response.data.message\n                              ? error.response.data.message\n                              : error.message,\n            })\n      }\n}\n\nexport const bookRoomDetails = (roomid) => async (dispatch) => {\n      try {\n            dispatch({\n                  type: ROOMS_POSTBYID_REQUEST\n            })\n            const { data } = await axios.post('/api/rooms/roomsbyId', { roomid })\n\n            dispatch({\n                  type: ROOMS_POSTBYID_SUCCESS,\n                  payload: data\n            })\n\n      } catch (error) {\n            dispatch({\n                  type: ROOMS_POSTBYIDL_FAIL,\n                  payload:\n                        error.response && error.response.data.message\n                              ? error.response.data.message\n                              : error.message,\n            })\n      }\n}\n\nexport const roomCreate = (name, maxcount, features1, features2, features3, features4, features5, rentperday, imageUrl1, imageUrl2, imageUrl3, type, description) => async (dispatch, getState) => {\n      try {\n            dispatch({\n                  type: CREATE_ROOMS_REQUEST,\n            })\n\n\n            const { data } = await axios.post(`/api/rooms/createrooms`, { name, maxcount, features1, features2, features3, features4, features5, rentperday, imageUrl1, imageUrl2, imageUrl3, type, description })\n\n            dispatch({\n                  type: CREATE_ROOMS_SUCCESS,\n                  payload: data,\n            })\n\n\n\n      } catch (error) {\n            dispatch({\n                  type: CREATE_ROOMS_FAIL,\n                  payload:\n                        error.response && error.response.data.message\n                              ? error.response.data.message\n                              : error.message,\n            })\n\n      }\n}\n\n\nexport const listRooms = () => async (dispatch) => {\n      try {\n            dispatch({\n                  type: ROOMS_LIST_REQUEST,\n            })\n\n            const { data } = await axios.get(`/api/rooms/allrooms`)\n\n            dispatch({\n                  type: ROOMS_LIST_SUCCESS,\n                  payload: data\n            })\n      } catch (error) {\n            dispatch({\n                  type: ROOMS_LIST_FAIL,\n                  payload:\n                        error.response && error.response.data.message\n                              ? error.response.data.message\n                              : error.message,\n            })\n      }\n}\n\n\nexport const deleteRoom = (id) => async (dispatch) => {\n      try {\n            dispatch({\n                  type: ROOMS_DELETE_REQUEST,\n            })\n\n            await axios.delete(`/api/rooms/${id}`)\n\n            dispatch({\n                  type: ROOMS_DELETE_SUCCESS,\n\n            })\n      } catch (error) {\n            dispatch({\n                  type: ROOMS_DELETE_FAIL,\n                  payload:\n                        error.response && error.response.data.message\n                              ? error.response.data.message\n                              : error.message,\n            })\n      }\n}\n\nexport const updateRoom = (rooms) => async (dispatch, getState) => {\n      try {\n            dispatch({\n                  type: ROOMS_UPDATE_RESET,\n            })\n\n\n            const { data } = await axios.put(`/api/rooms/${rooms._id}`, rooms)\n\n            dispatch({\n                  type: ROOMS_UPDATE_SUCCESS,\n                  payload: data,\n            })\n\n\n      } catch (error) {\n            dispatch({\n                  type: ROOMS_UPDATE_FAIL,\n                  payload:\n                        error.response && error.response.data.message\n                              ? error.response.data.message\n                              : error.message,\n            })\n      }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}